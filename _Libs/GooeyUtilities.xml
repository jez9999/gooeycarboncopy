<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GooeyUtilities</name>
    </assembly>
    <members>
        <member name="F:GooeyControls.GooeyTree.customStateImageList">
            <summary>
            The Treeview's .StateImageList controls what checkbox images get displayed.  If it is null, as it is
            if the .CheckBoxes property is set to false, no checkbox images get displayed.  However, conversely,
            we DO want .CheckBoxes set to false because this also means that the TreeView doesn't try to manage
            checkboxes itself; we're still able to manipulate this image list to display our own custom
            checkboxes.  We'll set .StateImageList to our custom state image list, which will have the images we
            want for our custom checkbox icons.
            </summary>
        </member>
        <member name="M:GooeyControls.GooeyTree.initNodesState(System.Windows.Forms.TreeNodeCollection)">
            <summary>
            Recursively initialize the state image and tag data of all nodes in the collection passed.
            </summary>
            <param name="nodes">The tree node collection to init the state of the nodes in.</param>
        </member>
        <member name="M:GooeyControls.GooeyTree.initStateImageList(System.Boolean)">
            <summary>
            Initialize the state image list of the TreeView.
            </summary>
            <param name="enable">Whether to enable checkbox images for this TreeView or not.</param>
        </member>
        <member name="M:GooeyControls.GooeyTree.nodeActivated(System.Windows.Forms.TreeNode,GooeyControls.GooeyTree.CheckBoxSpecialOperation,System.Boolean)">
            <summary>
            To be called when a checkbox node is activated either by key or by mouse.
            </summary>
            <param name="node">The checkbox node that was activated.</param>
            <param name="op">The special operation (if any) to perform on the node, with regards to checking its child nodes.</param>
            <param name="activatedByKeyboard">If the checkbox node was activated by keyboard, true; otherwise false.</param>
        </member>
        <member name="M:GooeyControls.GooeyTree.updateChildren(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            Recursively update the specified node's children according to its value.
            </summary>
            <param name="parent">The node whose children to update.</param>
            <param name="treatPermRecursiveAsChecked">Whether to treat perm recursive and disabled checked nodes as regular checked nodes, as normally they would be immune from recursive unchecking.</param>
        </member>
        <member name="M:GooeyControls.GooeyTree.updateParents(System.Windows.Forms.TreeNode)">
            <summary>
            Recursively update the specified node's parents according to its value.
            </summary>
            <param name="child">The node whose parents to update.</param>
        </member>
        <member name="M:GooeyControls.GooeyTree.aChildIsPermRecursive(System.Windows.Forms.TreeNode)">
            <summary>
            Recursively checks a node's children to see whether one is perm recursive.
            </summary>
            <param name="parent">The node whose children to check.</param>
            <returns>If a child is perm recursive, true; otherwise false.</returns>
        </member>
        <member name="M:GooeyUtilities.General.CustomAttributeProviderExtensions.GetCustomAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Gets a list of all custom attributes of the specified attribute type that have been applied.
            This list should therefore never contain more than one item, as that would imply that the same attribute had been applied twice.
            A 'custom attribute' is any applied attribute that has been implemented as a "FooAttribute" class, and isn't one of the 'standard'
            attributes like the ones you can get from, say, typeof(string).Attributes.
            </summary>
            <typeparam name="T">The type of the custom attribute(s) to get.</typeparam>
            <param name="provider">The object that implements the ICustomAttributeProvider interface.</param>
            <returns>The custom attribute(s) found.</returns>
        </member>
        <member name="T:GooeyUtilities.General.EnumHelper.EnumHelper`1">
            <summary>
            A class providing help with enumerations.
            </summary>
            <typeparam name="TEnum">The type of the enumeration being dealt with.</typeparam>
        </member>
        <member name="M:GooeyUtilities.General.EnumHelper.EnumHelper`1.#cctor">
            <summary>
            Checks to make sure that the generic type given to this class is an enumaration.
            </summary>
        </member>
        <member name="M:GooeyUtilities.General.EnumHelper.EnumHelper`1.GetEnumFromEnumValue(System.Object)">
            <summary>
            Returns an enumeration of type TEnum whose value is set to the specified value.
            Throws an exception if no entry in TEnum corresponds to the specified value.
            </summary>
            <param name="enumValue">The value that the returned enumeration should be set to.</param>
            <returns>An enumeration of type TEnum whose value is set to the specified value.</returns>
        </member>
        <member name="M:GooeyUtilities.General.EnumHelper.EnumHelper`1.GetEnumFromEnumName(System.String)">
            <summary>
            Returns an enumeration of type TEnum whose value is set to the value associated with the specified entry name.
            Throws an exception if no entry with the specified name is defined in the TEnum enumeration.
            </summary>
            <param name="enumName">The name of the entry whose associated value the returned TEnum should be set to.</param>
            <returns>An enumeration of type TEnum whose value is set to the value associated with the specified entry name.</returns>
        </member>
        <member name="M:GooeyUtilities.General.EnumHelper.EnumHelper`1.GetEnumValueFromEnum(`0)">
            <summary>
            Returns an object which is an instance of the underlying enum type and whose value is that defined for the
            specified enum instance.
            </summary>
            <param name="enumInstance">The instance of the enumeration whose value to get.</param>
            <returns>The object which is an instance of the underlying enum type and whose value is that defined for the specified enum instance.</returns>
        </member>
        <member name="M:GooeyUtilities.General.EnumHelper.EnumHelper`1.GetEnumNameFromEnum(`0)">
            <summary>
            Returns the name of the specified constant in its enumeration.
            </summary>
            <param name="enumInstance">The instance of the enum constant whose name to get.</param>
            <returns>The name of the specified constant.</returns>
        </member>
        <member name="M:GooeyUtilities.General.EnumHelper.EnumHelperExtensions.GetEnumName``1(``0)">
            <summary>
            Returns the name of this enum constant in its enumeration.
            </summary>
            <typeparam name="TEnum">The type of the enumeration that this enum instance belongs to.</typeparam>
            <param name="thisEnum">The enum instance to get the name for.</param>
            <returns>The name of the this enum constant.</returns>
        </member>
        <member name="M:GooeyUtilities.General.EnumHelper.EnumHelperExtensions.GetEnumValue``1(``0)">
            <summary>
            Returns an object which is an instance of the underlying type of this enum and whose value is that defined for this enum constant.
            </summary>
            <typeparam name="TEnum">The type of the enumeration that this enum instance belongs to.</typeparam>
            <param name="thisEnum">The enum instance to get the value for.</param>
            <returns>An object which is an instance of the underlying type of this enum and whose value is that defined for this enum constant.</returns>
        </member>
        <member name="M:GooeyUtilities.General.LinkedListHelper.LinkedListHelperExtensions.FindFirstBefore``1(System.Collections.Generic.LinkedListNode{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Searches linked list nodes using the given predicate starting from the specified node, going backwards toward the first node in the linked list.
            </summary>
            <typeparam name="T">The type of object the linked list is comprised of.</typeparam>
            <param name="thisNode">The node to start the search from.</param>
            <param name="searchThisNode">If true, searches the specified node first; otherwise, searches the node previous to the specified node first.</param>
            <param name="predicate">A delegate to execute which should evaluate the passed-in object and return true if it matches the search parameters, or false otherwise.</param>
            <returns>If any matching nodes exist previous to the specified node, the first found matching node; otherwise null.</returns>
        </member>
        <member name="M:GooeyUtilities.General.LinkedListHelper.LinkedListHelperExtensions.FindFirstAfter``1(System.Collections.Generic.LinkedListNode{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Searches linked list nodes using the given predicate starting from the specified node, going forwards toward the last node in the linked list.
            </summary>
            <typeparam name="T">The type of object the linked list is comprised of.</typeparam>
            <param name="thisNode">The node to start the search from.</param>
            <param name="searchThisNode">If true, searches the specified node first; otherwise, searches the node subsequent to the specified node first.</param>
            <param name="predicate">A delegate to execute which should evaluate the passed-in object and return true if it matches the search parameters, or false otherwise.</param>
            <returns>If any matching nodes exist subsequent to the specified node, the first found matching node; otherwise null.</returns>
        </member>
        <member name="M:GooeyUtilities.General.LinkedListHelper.LinkedListHelperExtensions.FindFirstForwards``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Searches a linked list using the given predicate, going forwards from the first node toward the last node in the linked list.
            </summary>
            <typeparam name="T">The type of object the linked list is comprised of.</typeparam>
            <param name="thisList">The linked list to search.</param>
            <param name="predicate">A delegate to execute which should evaluate the passed-in object and return true if it matches the search parameters, or false otherwise.</param>
            <returns>If any matching nodes exist in the linked list, the first found matching node (the one nearest the start of the list); otherwise null.</returns>
        </member>
        <member name="M:GooeyUtilities.General.LinkedListHelper.LinkedListHelperExtensions.FindLastBackwards``1(System.Collections.Generic.LinkedList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Searches a linked list using the given predicate, going backwards from the last node toward the first node in the linked list.
            </summary>
            <typeparam name="T">The type of object the linked list is comprised of.</typeparam>
            <param name="thisList">The linked list to search.</param>
            <param name="predicate">A delegate to execute which should evaluate the passed-in object and return true if it matches the search parameters, or false otherwise.</param>
            <returns>If any matching nodes exist in the linked list, the last found matching node (the one nearest the end of the list); otherwise null.</returns>
        </member>
        <member name="M:GooeyUtilities.General.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats a string using the values of the passed params, in the same way as string.Format does.
            </summary>
            <param name="format">The string to format.</param>
            <param name="values">The params whose values to use in the formatted string.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:Gooey.GooeyBTree`2">
            <summary>
            The main point of this structure is that stored values are inherently ordered.  When a value is inserted
            (the class can be accessed using an indexer), it is automatically ordered in the tree structure using the
            IComparable implemented by the TKey type.  Ergo, the tree can later be walked from 'smallest' to 'largest'
            or vice versa, according to the ordering of the nodes.
            
            Microsoft's SortedList and SortedDictionary basically implement this, save for the ability to throw an
            exception if the key already exists, when accessing a node via IDictionary.  Recommend using them instead,
            as they don't throw a StackOverflowException when you populate them with large numbers of elements.
            </summary>
        </member>
        <member name="M:Gooey.GooeyBTree`2.#ctor(System.Boolean)">
            <summary>
            Constructor for Gooey binary tree class.
            </summary>
            <param name="exceptionOnNodeKeyClash">Whether to raise an exception when one tries to set a particular key and a node with that key value already exists.  True do do so, false to just update that node to the new value.</param>
        </member>
        <member name="P:Gooey.GooeyBTree`2.ExceptionOnNodeKeyClash">
            <summary>
            Whether to throw an exception when a new node is added and its key conflicts with the key of an existing node.  If true, throws a GooeyNodeAlreadyExistsException; if false, simply updates that node with the new value.
            </summary>
        </member>
        <member name="M:Gooey.GooeyBTree`2.addNodeTo(Gooey.GooeyBTreeNode{`0,`1},Gooey.GooeyBTreeNode{`0,`1})">
            <summary>
            Recursive function that adds a node to the given node if it can, otherwise searches down the tree until it finds a node it can add the node to.
            </summary>
            <param name="addTo">The node to start the search at, ie. under which we want to add the new node.</param>
            <param name="nodeToAdd">The node to add to the tree.</param>
        </member>
        <member name="M:Gooey.GooeyBTree`2.getSmallestNode(Gooey.GooeyBTreeNode{`0,`1})">
            <summary>
            Recursive function that gets the node with the 'smallest' key value.
            </summary>
            <param name="getFrom">The node to start the search at, ie. under which we want to find the smallest value.</param>
            <returns>The found node with the smallest value.</returns>
        </member>
        <member name="M:Gooey.GooeyBTree`2.getLargestNode(Gooey.GooeyBTreeNode{`0,`1})">
            <summary>
            Recursive function that gets the node with the 'largest' key value.
            </summary>
            <param name="getFrom">The node to start the search at, ie. under which we want to find the largest value.</param>
            <returns>The found node with the largest value.</returns>
        </member>
        <member name="M:Gooey.GooeyBTree`2.getNode(`0,Gooey.GooeyBTreeNode{`0,`1})">
            <summary>
            Gets a node in the tree by its key value.
            </summary>
            <param name="key">The key of the node we're searching for.</param>
            <param name="getFrom">The node to start the search at, ie. under which we want to find the node with the given key.</param>
            <returns>The found node.  null if the node could not be found.</returns>
        </member>
        <member name="M:Gooey.GooeyBTree`2.deleteNode(Gooey.GooeyBTreeNode{`0,`1})">
            <summary>
            Deletes the specified note from the tree.
            </summary>
            <param name="nodeToDelete">The node to delete from the tree.</param>
        </member>
        <member name="M:Gooey.GooeyBTree`2.AddNode(`0,`1)">
            <summary>
            Adds a node to the tree given a particular key and value for the node to hold.  If a node with an identical key already exists, may throw an exception or overwrite that node, depending on the value of ExceptionOnNodeKeyClash.
            </summary>
            <param name="key">The new node's key.</param>
            <param name="val">The new node's value.</param>
        </member>
        <member name="M:Gooey.GooeyBTree`2.DeleteNode(`0)">
            <summary>
            Deletes a node from the tree with the given key.
            </summary>
            <param name="nodeKey">The key of the node to delete.</param>
            <returns>True if a node with the given key existed and was deleted; false if no such node existed.</returns>
        </member>
        <member name="M:Gooey.GooeyBTree`2.DeleteAllNodes">
            <summary>
            Completely clears/terminates the binary tree of all data.
            </summary>
        </member>
        <member name="P:Gooey.GooeyBTreeNode`2.LeftNode">
            <summary>
            Used to point to the node whose key is a 'lesser' value than this one.
            </summary>
        </member>
        <member name="P:Gooey.GooeyBTreeNode`2.RightNode">
            <summary>
            Used to point to the node whose key is a 'greater' value than this one.
            </summary>
        </member>
        <member name="P:Gooey.GooeyBTreeNode`2.ParentNode">
            <summary>
            Used to point to the node that, in the tree, is the parent of this one.
            </summary>
        </member>
        <member name="P:Gooey.GooeyBTreeNode`2.Key">
            <summary>
            This node's key.
            </summary>
        </member>
        <member name="P:Gooey.GooeyBTreeNode`2.Value">
            <summary>
            This node's value.
            </summary>
        </member>
        <member name="T:Gooey.CloseButtonDisabler">
            <summary>
            Because Microsoft bizarrely elected not to allow you to disable the close button from their Form class, we have to implement the ability to do it here by using the Win32 API.
            </summary>
        </member>
        <member name="M:Gooey.CloseButtonDisabler.InitValues(System.Windows.Forms.Form)">
            <summary>
            This must be called before any other functionality of the class is used, so it knows which form it's dealing with.
            </summary>
            <param name="frmDisableMyButton"></param>
        </member>
        <member name="M:Gooey.CloseButtonDisabler.EventSizeChanged">
            <summary>
            When a Form is resized, its close button's status will be reset.  You should register a .SizeChanged event handler and make it call this method, in order to maintain the state of the close button whether enabled OR disabled).
            </summary>
        </member>
        <member name="P:Gooey.CloseButtonDisabler.ButtonDisabled">
            <summary>
            Set this property to true to disable the close button, or false to enable it.  The property value is a boolean indicating whether the close button is currently disabled or not.
            </summary>
        </member>
        <member name="T:Gooey.VersionStringType">
            <summary>
            Used to specify the type of version string that should be generated.
            </summary>
        </member>
        <member name="F:Gooey.VersionStringType.FullString">
            <summary>
            A full Assembly version string, including major, minor, build, and revision.
            </summary>
        </member>
        <member name="T:Gooey.Utilities">
            <summary>
            Gooey Software's general utility functions class
            </summary>
        </member>
        <member name="M:Gooey.Utilities.GetEmbeddedResource(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Gets an embedded resource back from the given assembly as a stream.
            </summary>
            <param name="getFrom">The assembly from which to get the embedded resource.</param>
            <param name="defaultNamespace">The default namespace for the assembly.  This is determined at compile-time by Visual Studio, and is specified in the project properties dialog.</param>
            <param name="resourceName">The name of the resource to retreive, in "Path.to.filename.ext" format.</param>
            <returns>A stream containing the specified resource if found, or null otherwise.</returns>
        </member>
        <member name="M:Gooey.Utilities.GetVersionString(System.Reflection.Assembly,Gooey.VersionStringType)">
            <summary>
            Returns a string indicating the version of the Assenbly supplied.
            </summary>
            <param name="getVersionFor">The Assembly to get the version string for.</param>
            <param name="versionStrType">The format of the version string to return.</param>
            <returns>The version string for the Assembly supplied.</returns>
        </member>
        <member name="T:Gooey.Utilities.FileUrlFragmentPart">
            <summary>
            Specifies a part of a file URL
            </summary>
        </member>
        <member name="F:Gooey.Utilities.FileUrlFragmentPart.DriveName">
            <summary>
            The 'drive name' part (eg. 'C' from file://C:\path\to\codebase.exe)
            </summary>
        </member>
        <member name="F:Gooey.Utilities.FileUrlFragmentPart.Path">
            <summary>
            The 'path' part (eg. '\path\to\' from file://C:\path\to\codebase.exe)
            </summary>
        </member>
        <member name="F:Gooey.Utilities.FileUrlFragmentPart.FileName">
            <summary>
            The 'file name' part (eg. 'codebase.exe' from file://C:\path\to\codebase.exe)
            </summary>
        </member>
        <member name="F:Gooey.Utilities.FileUrlFragmentPart.FileBody">
            <summary>
            The body of the 'file name' part (eg. 'codebase' from file://C:\path\to\codebase.exe)
            </summary>
        </member>
        <member name="F:Gooey.Utilities.FileUrlFragmentPart.FileExt">
            <summary>
            The extension of the 'file name' part (eg. 'exe' from file://C:\path\to\codebase.exe)
            </summary>
        </member>
        <member name="M:Gooey.Utilities.GetFragmentFromFileUrl(System.String,Gooey.Utilities.FileUrlFragmentPart)">
            <summary>
            Captures and returns a part of a file URL (eg. file://C:\path\to\codebase.exe)
            </summary>
            <param name="fileUrl">The file URL.</param>
            <param name="fragmentPart">The part to retreive from the file URL.</param>
            <returns>The retreived part, eg. 'C' or 'filename.exe', or an empty string if the specified part was not found.</returns>
        </member>
        <member name="M:Gooey.Utilities.ShowError(System.String)">
            <summary>
            Shows an error message dialog with generic error title, OK button, and error message icon.
            </summary>
            <param name="errorMsg">The string of the error message to display.</param>
        </member>
        <member name="M:Gooey.Utilities.ShowWarning(System.String)">
            <summary>
            Shows a warning message dialog with generic error title, OK button, and error message icon.
            </summary>
            <param name="warningMsg">The string of the warning message to display.</param>
        </member>
        <member name="M:Gooey.Utilities.ShowInfo(System.String)">
            <summary>
            Shows an information message dialog with generic information title, OK button, and information icon.
            </summary>
            <param name="infoMsg">The string of the information message to display.</param>
        </member>
        <member name="M:Gooey.Utilities.ShowOkCancel(System.String,System.String)">
            <summary>
            Shows an OK/Cancel dialog with specified title, message, OK/Cancel buttons, and Question icon.
            </summary>
            <param name="title">The title/caption for the dialog.</param>
            <param name="okCancelMsg">The string of the OK/cancel message to display.</param>
            <returns>The result of the user's interaction with the dialog.</returns>
        </member>
        <member name="M:Gooey.Utilities.ShowYesNo(System.String,System.String)">
            <summary>
            Shows an Yes/No dialog with specified title, message, Yes/No buttons, and Question icon.
            </summary>
            <param name="title">The title/caption for the dialog.</param>
            <param name="yesNoMsg">The string of the Yes/No message to display.</param>
            <returns>The result of the user's interaction with the dialog.</returns>
        </member>
        <member name="M:Gooey.Utilities.ShowYesNoCancel(System.String,System.String)">
            <summary>
            Shows a Yes/No/Cancel dialog with specified title, message, Yes/No/Cancel buttons, and Question icon.
            </summary>
            <param name="title">The title/caption for the dialog.</param>
            <param name="yesNoCancelMsg">The string of the Yes/No/Cancel message to display.</param>
            <returns>The result of the user's interaction with the dialog.</returns>
        </member>
        <member name="M:Gooey.Utilities.ConvertToUnixNewlines(System.String)">
            <summary>
            Normalizes all newlines from the input string into Unix-style newlines (\n).
            </summary>
            <param name="inputTxt">The text whose newlines to normalize.</param>
            <returns>The text with normalized newlines.</returns>
        </member>
        <member name="M:Gooey.Utilities.ConvertToMacNewlines(System.String)">
            <summary>
            Normalizes all newlines from the input string into Mac-style newlines (\r).
            </summary>
            <param name="inputTxt">The text whose newlines to normalize.</param>
            <returns>The text with normalized newlines.</returns>
        </member>
        <member name="M:Gooey.Utilities.ConvertToWindowsNewlines(System.String)">
            <summary>
            Normalizes all newlines from the input string into Windows-style newlines (\r\n).
            </summary>
            <param name="inputTxt">The text whose newlines to normalize.</param>
            <returns>The text with normalized newlines.</returns>
        </member>
        <member name="M:Gooey.Utilities.ScrollTextBoxEnd(System.Windows.Forms.RichTextBox)">
            <summary>
            Scrolls the textbox to the end/bottom.  USES THE WIN32 API.
            </summary>
            <param name="rtb">The RichTextBox object to scroll to the end/bottom.</param>
        </member>
        <member name="M:Gooey.Utilities.ConvertHexStringToBytes(System.String)">
            <summary>
            Takes in a string representation of (non-space-separated) hex values, two characters per byte, and converts it into an array of bytes corresponding to the passed-in hex values.
            </summary>
            <param name="hexString">The string of hex characters to convert into bytes.</param>
            <returns>The bytes that the passed-in hex characters represent.</returns>
        </member>
        <member name="T:Gooey.SafeInvoker">
            <summary>
            Handles the calling of the Form.Invoke() method in a safe way; that is to say that it will, by default, drop exceptions.  This may be needed if Invoke is called at a time when the Form may be closing or have closed, so an ObjectDisposedException or InvalidOperationException (which we can safely ignore) may arise.
            </summary>
        </member>
    </members>
</doc>
